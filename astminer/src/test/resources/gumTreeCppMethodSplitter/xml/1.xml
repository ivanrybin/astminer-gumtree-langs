<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++"
      filename="1.hpp">
    <cpp:pragma>#<cpp:directive>pragma</cpp:directive>
        <name>once</name>
    </cpp:pragma>

    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;vector&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;iterator&gt;</cpp:file>
    </cpp:include>

    <function_decl>
        <type>
            <name>void</name>
        </type>
        <name>func_decl</name>
        <parameter_list>()</parameter_list>;
    </function_decl>

    <function_decl>
        <type>
            <name>void</name>
        </type>
        <name>func_decl</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>x</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        ;
    </function_decl>

    <function_decl>
        <type>
            <name>
                <name>std</name>
                <operator>::</operator>
                <name>string</name>
            </name>
        </type>
        <name>func_decl</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>x</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>int</name>
                    </type>
                    <name>y</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        ;
    </function_decl>

    <namespace>namespace <name>cls_05</name>
        <block>{

            <using>
                <template>template
                    <parameter_list>&lt;<parameter>
                        <type>
                            <name>typename</name>
                        </type>
                        <name>It</name>
                    </parameter>&gt;
                    </parameter_list>
                </template>
                using <name>diff_type</name>
                <init>=
                    <type>
                        <name>
                            <typename>typename</typename>
                            <name>std</name>
                            <operator>::</operator>
                            <name>iterator_traits</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>It</name>
                                </expr>
                            </argument>&gt;
                            </argument_list>
                            <operator>::</operator>
                            <name>difference_type</name>
                        </name>
                    </type>
                </init>
                ;
            </using>

            <function>
                <template>template
                    <parameter_list>&lt;<parameter>
                        <type>
                            <name>typename</name>
                        </type>
                        <name>It</name>
                    </parameter>&gt;
                    </parameter_list>
                </template>
                <type>
                    <name>
                        <name>diff_type</name>
                        <argument_list type="generic">&lt;<argument>
                            <expr>
                                <name>It</name>
                            </expr>
                        </argument>&gt;
                        </argument_list>
                    </name>
                </type>
                <name>distance</name>
                <parameter_list>(
                    <parameter>
                        <decl>
                            <type>
                                <name>It</name>
                            </type>
                            <name>first</name>
                        </decl>
                    </parameter>
                    ,
                    <parameter>
                        <decl>
                            <type>
                                <name>It</name>
                            </type>
                            <name>second</name>
                        </decl>
                    </parameter>
                    ,
                    <parameter>
                        <decl>
                            <type>
                                <name>
                                    <name>std</name>
                                    <operator>::</operator>
                                    <name>bidirectional_iterator_tag</name>
                                </name>
                            </type>
                        </decl>
                    </parameter>
                    )
                </parameter_list>
                <block>{
                    <block_content>
                        <decl_stmt>
                            <decl>
                                <type>
                                    <name>auto</name>
                                </type>
                                <name>dist</name>
                                <init>=
                                    <expr>
                                        <literal type="number">0</literal>
                                    </expr>
                                </init>
                            </decl>
                            ;
                        </decl_stmt>
                        <while>while
                            <condition>(
                                <expr>
                                    <name>first</name>
                                    <operator>!=</operator>
                                    <name>second</name>
                                </expr>
                                )
                            </condition>
                            <block>{
                                <block_content>
                                    <expr_stmt>
                                        <expr>
                                            <operator>++</operator>
                                            <name>dist</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                    <expr_stmt>
                                        <expr>
                                            <operator>++</operator>
                                            <name>first</name>
                                        </expr>
                                        ;
                                    </expr_stmt>
                                </block_content>
                                }
                            </block>
                        </while>
                        <return>return
                            <expr>
                                <name>dist</name>
                            </expr>
                            ;
                        </return>
                    </block_content>
                    }
                </block>
            </function>
            }
        </block>
    </namespace>
</unit>
