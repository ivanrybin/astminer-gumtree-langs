<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++"
      filename="2.cpp">
    <comment type="block">/*
        Huffman coding.
        */
    </comment>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;iostream&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;fstream&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;queue&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;bitset&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;algorithm&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;experimental/filesystem&gt;</cpp:file>
    </cpp:include>

    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>"huffman.hpp"</cpp:file>
    </cpp:include>

    <namespace>namespace <name>fs</name> =
        <name>
            <name>std</name>
            <operator>::</operator>
            <name>experimental</name>
            <operator>::</operator>
            <name>filesystem</name>
        </name>
        ;
    </namespace>

    <function type="operator">
        <type>
            <name>bool</name>
        </type>
        <name>operator
            <name>&lt;</name>
        </name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>CharData</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>lhs</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>CharData</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>rhs</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <return>return
                    <expr>
                        <name>
                            <name>lhs</name>
                            <operator>.</operator>
                            <name>frequency</name>
                        </name>
                        <operator>&gt;</operator>
                        <name>
                            <name>rhs</name>
                            <operator>.</operator>
                            <name>frequency</name>
                        </name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <comment type="block">/*
        comment
        */
    </comment>
    <function>
        <type>
            <name>bool</name>
        </type>
        <name>codes_sort</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>pair</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>unsigned</name>
                                    <name>char</name>
                                </expr>
                            </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>
                                            <name>std</name>
                                            <operator>::</operator>
                                            <name>string</name>
                                        </name>
                                    </expr>
                                </argument>&gt;
                            </argument_list>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>lhs</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>pair</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>unsigned</name>
                                    <name>char</name>
                                </expr>
                            </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>
                                            <name>std</name>
                                            <operator>::</operator>
                                            <name>string</name>
                                        </name>
                                    </expr>
                                </argument>&gt;
                            </argument_list>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>rhs</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <return>return
                    <expr>
                        <name>
                            <name>lhs</name>
                            <operator>.</operator>
                            <name>second</name>
                        </name>
                        <operator>&lt;</operator>
                        <name>
                            <name>rhs</name>
                            <operator>.</operator>
                            <name>second</name>
                        </name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>size_t</name>
        </type>
        <name>get_file_size</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>file_name</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <return>return
                    <expr>
                        <call>
                            <name>
                                <name>fs</name>
                                <operator>::</operator>
                                <name>file_size</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <call>
                                            <name>
                                                <name>fs</name>
                                                <operator>::</operator>
                                                <name>path</name>
                                            </name>
                                            <argument_list>(
                                                <argument>
                                                    <expr>
                                                        <name>file_name</name>
                                                    </expr>
                                                </argument>
                                                )
                                            </argument_list>
                                        </call>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>const</specifier>
            <name>char</name>
            <modifier>*</modifier>
        </type>
        <name>get_char_content</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>file_name</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>size</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>

                <decl_stmt>
                    <decl>
                        <type>
                            <name>char</name>
                            <modifier>*</modifier>
                        </type>
                        <name>buffer</name>
                        <init>=
                            <expr>
                                <operator>new</operator>
                                <name>
                                    <name>char</name>
                                    <index>[
                                        <expr>
                                            <name>size</name>
                                            <operator>+</operator>
                                            <literal type="number">1</literal>
                                        </expr>
                                        ]
                                    </index>
                                </name>
                                <block>{}</block>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <name>buffer</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>
                <name>std</name>
                <operator>::</operator>
                <name>vector</name>
                <argument_list type="generic">&lt;<argument>
                    <expr>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                    </expr>
                </argument>&gt;
                </argument_list>
            </name>
        </type>
        <name>get_alphabet_tree_str</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>char</name>
                        <modifier>*</modifier>
                    </type>
                    <name>content</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>content_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>alphabet_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>tree_size</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <return>return
                    <expr>
                        <block>{}</block>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>
                <name>std</name>
                <operator>::</operator>
                <name>string</name>
            </name>
        </type>
        <name>get_out_str</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>alphabet</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>tree</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>str</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>bits_tree</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>bits_data</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <return>return
                    <expr>
                        <name>out</name>
                        <operator>+</operator>
                        <name>alphabet</name>
                        <operator>+</operator>
                        <name>tree</name>
                        <operator>+</operator>
                        <literal type="string">"!T^"</literal>
                        <operator>+</operator>
                        <name>str</name>
                    </expr>
                    ;
                </return>
                <comment type="line">// !T^ -- separator between tree and encoded string</comment>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>void</name>
        </type>
        <name>print_statistics</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>input_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>output_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>help_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>char_code_map</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>chars_codes</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>bool</name>
                    </type>
                    <name>is_console</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{<block_content>
        </block_content>}
        </block>
    </function>

    <function>
        <type>
            <name>void</name>
        </type>
        <name>write_file</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>file_name</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>output_str</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{<block_content>
        </block_content>}
        </block>
    </function>

    <function>
        <type>
            <name>void</name>
        </type>
        <name>free_memory</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>vector</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <specifier>const</specifier>
                                    <name>Node</name>
                                    <modifier>*</modifier>
                                </expr>
                            </argument>&gt;
                            </argument_list>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>nodes</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>

                <for>for
                    <control>(
                        <init>
                            <decl>
                                <type>
                                    <specifier>const</specifier>
                                    <specifier>auto</specifier>
                                    <modifier>&amp;</modifier>
                                </type>
                                <name>item</name>
                                <range>:
                                    <expr>
                                        <name>nodes</name>
                                    </expr>
                                </range>
                            </decl>
                        </init>
                        )
                    </control>
                    <block>{
                        <block_content>
                            <expr_stmt>
                                <expr>
                                    <operator>delete</operator>
                                    <name>item</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </block_content>
                        }
                    </block>
                </for>
                <expr_stmt>
                    <expr>
                        <name>nodes</name>
                        <operator>=</operator>
                        <block>{}</block>
                    </expr>
                    ;
                </expr_stmt>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>
                <name>std</name>
                <operator>::</operator>
                <name>vector</name>
                <argument_list type="generic">&lt;<argument>
                    <expr>
                        <name>CharData</name>
                    </expr>
                </argument>&gt;
                </argument_list>
            </name>
        </type>
        <name>chars_frequencies</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>char</name>
                        <modifier>*</modifier>
                    </type>
                    <name>content</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>size</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>char_freq_map</name>
                        </type>
                        <name>chars_freq_map</name>
                        <argument_list>{}</argument_list>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <name>chars_freq_vec</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>
                <name>std</name>
                <operator>::</operator>
                <name>string</name>
            </name>
        </type>
        <name>huffman_decoding</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>encoded_str</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>Node</name>
                        <modifier>*</modifier>
                    </type>
                    <name>root</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>char_code_map</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>chars_codes</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>
                                <name>std</name>
                                <operator>::</operator>
                                <name>stringstream</name>
                            </name>
                        </type>
                        <name>ss</name>
                        <argument_list>{}</argument_list>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <call>
                            <name>
                                <name>ss</name>
                                <operator>.</operator>
                                <name>str</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>char_code_map</name>
        </type>
        <name>huffman_encoding</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>vector</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>CharData</name>
                                </expr>
                            </argument>&gt;
                            </argument_list>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>input_chars</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>char_code_map</name>
                        </type>
                        <name>encoded_chars</name>
                        <argument_list>{}</argument_list>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <name>encoded_chars</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>Node</name>
            <modifier>*</modifier>
        </type>
        <name>build_tree_with_map</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>char_code_map</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>encoded_chars</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>memory_vector</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>nodes</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <return>return
                    <expr>
                        <literal type="null">nullptr</literal>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>void</name>
        </type>
        <name>dfs</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>Node</name>
                        <modifier>*</modifier>
                    </type>
                    <name>root</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>stringstream</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>tree</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>alphabet</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{<block_content>
        </block_content>}
        </block>
    </function>

    <function>
        <type>
            <name>
                <name>std</name>
                <operator>::</operator>
                <name>string</name>
            </name>
        </type>
        <name>encode_tree</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>Node</name>
                        <modifier>*</modifier>
                    </type>
                    <name>root</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>bits_tree</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>alphabet</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>
                                <name>std</name>
                                <operator>::</operator>
                                <name>string</name>
                            </name>
                        </type>
                        <name>bytes_encoded_tree</name>
                        <argument_list>{}</argument_list>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <name>bytes_encoded_tree</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>Node</name>
            <modifier>*</modifier>
        </type>
        <name>build_alphabet_tree</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>alphabet</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>encoded_tree</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>memory_vector</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>nodes</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>Node</name>
                            <modifier>*</modifier>
                        </type>
                        <name>root</name>
                        <init>=
                            <expr>
                                <operator>new</operator>
                                <name>Node</name>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <name>root</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>
                <name>std</name>
                <operator>::</operator>
                <name>string</name>
            </name>
        </type>
        <name>encode_string</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>char</name>
                        <modifier>*</modifier>
                    </type>
                    <name>content</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>char_code_map</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>char_freq_map</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>bits_data</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>
                                <name>std</name>
                                <operator>::</operator>
                                <name>string</name>
                            </name>
                        </type>
                        <name>bytes_encoded_str</name>
                        <argument_list>{}</argument_list>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <name>bytes_encoded_str</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>void</name>
        </type>
        <name>encoding</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>char</name>
                        <modifier>*</modifier>
                    </type>
                    <name>input_str</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>input_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>output_file</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>bool</name>
                    </type>
                    <name>is_console</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>memory_vector</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>nodes</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{<block_content>
        </block_content>}
        </block>
    </function>

    <function>
        <type>
            <name>void</name>
        </type>
        <name>decoding</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>vector</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>
                                        <name>std</name>
                                        <operator>::</operator>
                                        <name>string</name>
                                    </name>
                                </expr>
                            </argument>&gt;
                            </argument_list>
                        </name>
                    </type>
                    <name>v_alphabet_tree_str</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>input_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>alpha_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>size_t</name>
                    </type>
                    <name>tree_size</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>std</name>
                            <operator>::</operator>
                            <name>string</name>
                        </name>
                    </type>
                    <name>output_file</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>bool</name>
                    </type>
                    <name>is_console</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>memory_vector</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>nodes</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{<block_content>
        </block_content>}
        </block>
    </function>
</unit>
