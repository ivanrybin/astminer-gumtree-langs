<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" xmlns:cpp="http://www.srcML.org/srcML/cpp" revision="1.0.0" language="C++"
      filename="5.cpp">
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;algorithm&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;cmath&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;cstdio&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;cstdlib&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;cstring&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;iomanip&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;iostream&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;map&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;queue&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;set&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;sstream&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;string&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;vector&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;list&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;cassert&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;queue&gt;</cpp:file>
    </cpp:include>
    <cpp:include>#<cpp:directive>include</cpp:directive>
        <cpp:file>&lt;deque&gt;</cpp:file>
    </cpp:include>

    <using>using
        <namespace>namespace <name>std</name>;
        </namespace>
    </using>
    <function>
        <template>template
            <parameter_list>&lt;<parameter>
                <type>
                    <name>class</name>
                </type>
                <name>_T</name>
            </parameter>&gt;
            </parameter_list>
        </template>
        <type>
            <specifier>inline</specifier>
            <name>_T</name>
        </type>
        <name>sqr</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>_T</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>x</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <return>return
                    <expr>
                        <name>x</name>
                        <operator>*</operator>
                        <name>x</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>
    <function>
        <template>template
            <parameter_list>&lt;<parameter>
                <type>
                    <name>class</name>
                </type>
                <name>_T</name>
            </parameter>&gt;
            </parameter_list>
        </template>
        <type>
            <specifier>inline</specifier>
            <name>_T</name>
        </type>
        <name>ABS</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>_T</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>x</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <return>return
                    <expr>
                        <ternary>
                            <condition>
                                <expr>
                                    <operator>(</operator>
                                    <name>x</name>
                                    <operator>&lt;</operator>
                                    <literal type="number">0</literal>
                                    <operator>)</operator>
                                </expr>
                                ?
                            </condition>
                            <then>
                                <expr>
                                    <operator>-</operator>
                                    <name>x</name>
                                </expr>
                            </then>
                            <else>:
                                <expr>
                                    <name>x</name>
                                </expr>
                            </else>
                        </ternary>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>
    <function>
        <template>template
            <parameter_list>&lt;<parameter>
                <type>
                    <name>class</name>
                </type>
                <name>_T</name>
            </parameter>&gt;
            </parameter_list>
        </template>
        <type>
            <specifier>inline</specifier>
            <name>string</name>
        </type>
        <name>tostr</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>_T</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>a</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>ostringstream</name>
                        </type>
                        <name>os</name>
                        <argument_list>(
                            <argument>
                                <expr>
                                    <literal type="string">""</literal>
                                </expr>
                            </argument>
                            )
                        </argument_list>
                    </decl>
                    ;
                </decl_stmt>
                <expr_stmt>
                    <expr>
                        <name>os</name>
                        <operator>&lt;&lt;</operator>
                        <name>a</name>
                    </expr>
                    ;
                </expr_stmt>
                <return>return
                    <expr>
                        <call>
                            <name>
                                <name>os</name>
                                <operator>.</operator>
                                <name>str</name>
                            </name>
                            <argument_list>()</argument_list>
                        </call>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>
    <function type="operator">
        <template>template
            <parameter_list>&lt;<parameter>
                <type>
                    <name>class</name>
                </type>
                <name>_T</name>
            </parameter>&gt;
            </parameter_list>
        </template>
        <type>
            <specifier>inline</specifier>
            <name>istream</name>
            <modifier>&amp;</modifier>
        </type>
        <name>operator
            <name>&lt;&lt;</name>
        </name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>istream</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>is</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>_T</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>a</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>
                                <name>is</name>
                                <operator>.</operator>
                                <name>putback</name>
                            </name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>a</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <return>return
                    <expr>
                        <name>is</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>
    <function>
        <template>template
            <parameter_list>&lt;<parameter>
                <type>
                    <name>class</name>
                </type>
                <name>_T</name>
            </parameter>&gt;
            </parameter_list>
        </template>
        <type>
            <specifier>inline</specifier>
            <name>_T</name>
        </type>
        <name>gcd</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>_T</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>a</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <specifier>const</specifier>
                        <name>_T</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>b</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>_T</name>
                        </type>
                        <name>t</name>
                    </decl>
                    ;
                </decl_stmt>
                <while>while
                    <condition>(
                        <expr>
                            <operator>!</operator>
                            <operator>(</operator>
                            <name>b</name>
                            <operator>==</operator>
                            <literal type="number">0</literal>
                            <operator>)</operator>
                        </expr>
                        )
                    </condition>
                    <block>{
                        <block_content>
                            <expr_stmt>
                                <expr>
                                    <name>t</name>
                                    <operator>=</operator>
                                    <name>a</name>
                                    <operator>%</operator>
                                    <name>b</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>a</name>
                                    <operator>=</operator>
                                    <name>b</name>
                                </expr>
                                ;
                            </expr_stmt>
                            <expr_stmt>
                                <expr>
                                    <name>b</name>
                                    <operator>=</operator>
                                    <name>t</name>
                                </expr>
                                ;
                            </expr_stmt>
                        </block_content>
                        }
                    </block>
                </while>
                <return>return
                    <expr>
                        <name>a</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <typedef>typedef
        <type>
            <name>long</name>
            <name>double</name>
        </type>
        <name>ld</name>;
    </typedef>

    <decl_stmt>
        <decl>
            <type>
                <specifier>const</specifier>
                <name>ld</name>
            </type>
            <name>EPS</name>
            <init>=
                <expr>
                    <literal type="number">1e-11</literal>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <typedef>typedef
        <type>
            <name>unsigned</name>
        </type>
        <name>uns</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>signed</name>
            <name>long</name>
            <name>long</name>
        </type>
        <name>i64</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>unsigned</name>
            <name>long</name>
            <name>long</name>
        </type>
        <name>u64</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>
                <name>set</name>
                <argument_list type="generic">&lt;
                    <argument>
                        <expr>
                            <name>int</name>
                        </expr>
                    </argument> &gt;
                </argument_list>
            </name>
        </type>
        <name>SI</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>
                <name>vector</name>
                <argument_list type="generic">&lt;
                    <argument>
                        <expr>
                            <name>ld</name>
                        </expr>
                    </argument> &gt;
                </argument_list>
            </name>
        </type>
        <name>VD</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>
                <name>vector</name>
                <argument_list type="generic">&lt;
                    <argument>
                        <expr>
                            <name>int</name>
                        </expr>
                    </argument> &gt;
                </argument_list>
            </name>
        </type>
        <name>VI</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>
                <name>vector</name>
                <argument_list type="generic">&lt;
                    <argument>
                        <expr>
                            <name>bool</name>
                        </expr>
                    </argument> &gt;
                </argument_list>
            </name>
        </type>
        <name>VB</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>
                <name>vector</name>
                <argument_list type="generic">&lt;
                    <argument>
                        <expr>
                            <name>string</name>
                        </expr>
                    </argument> &gt;
                </argument_list>
            </name>
        </type>
        <name>VS</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>
                <name>map</name>
                <argument_list type="generic">&lt;
                    <argument>
                        <expr>
                            <name>string</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>int</name>
                        </expr>
                    </argument> &gt;
                </argument_list>
            </name>
        </type>
        <name>MSI</name>;
    </typedef>
    <typedef>typedef
        <type>
            <name>
                <name>map</name>
                <argument_list type="generic">&lt;
                    <argument>
                        <expr>
                            <name>string</name>
                        </expr>
                    </argument>
                    ,
                    <argument>
                        <expr>
                            <name>void</name>
                            <modifier>*</modifier>
                        </expr>
                    </argument> &gt;
                </argument_list>
            </name>
        </type>
        <name>MSV</name>;
    </typedef>

    <decl_stmt>
        <decl>
            <type>
                <specifier>static</specifier>
                <name>bool</name>
                <specifier>const</specifier>
            </type>
            <name>_debug_</name>
            <init>=
                <expr>
                    <literal type="boolean">false</literal>
                </expr>
            </init>
        </decl>
        ;
    </decl_stmt>

    <function>
        <type>
            <specifier>inline</specifier>
            <name>uns</name>
        </type>
        <name>func1</name>
        <parameter_list>()</parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>uns</name>
                        </type>
                        <name>curr</name>
                    </decl>
                    ;
                </decl_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>scanf</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <literal type="string">"%u"</literal>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <operator>&amp;</operator>
                                        <name>curr</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <return>return
                    <expr>
                        <name>curr</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>inline</specifier>
            <name>void</name>
        </type>
        <name>func2</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>uns</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>one</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>uns</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>two</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>scanf</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <literal type="string">"%u%u"</literal>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <operator>&amp;</operator>
                                        <name>one</name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <operator>&amp;</operator>
                                        <name>two</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
            </block_content>
            }
        </block>
    </function>


    <function>
        <type>
            <specifier>inline</specifier>
            <name>void</name>
        </type>
        <name>func3</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>int</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>one</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>int</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>two</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>scanf</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <literal type="string">"%d%d"</literal>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <operator>&amp;</operator>
                                        <name>one</name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <operator>&amp;</operator>
                                        <name>two</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>inline</specifier>
            <name>double</name>
        </type>
        <name>func4</name>
        <parameter_list>()</parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>double</name>
                        </type>
                        <name>curr</name>
                    </decl>
                    ;
                </decl_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>scanf</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <literal type="string">"%lf"</literal>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <operator>&amp;</operator>
                                        <name>curr</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <return>return
                    <expr>
                        <name>curr</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>inline</specifier>
            <name>string</name>
        </type>
        <name>func5</name>
        <parameter_list>()</parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>string</name>
                        </type>
                        <name>curr</name>
                    </decl>
                    ;
                </decl_stmt>
                <expr_stmt>
                    <expr>
                        <name>cin</name>
                        <operator>&gt;&gt;</operator>
                        <name>curr</name>
                    </expr>
                    ;
                </expr_stmt>
                <return>return
                    <expr>
                        <name>curr</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>inline</specifier>
            <name>string</name>
        </type>
        <name>func6</name>
        <parameter_list>()</parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>string</name>
                        </type>
                        <name>curr</name>
                    </decl>
                    ;
                </decl_stmt>
                <expr_stmt>
                    <expr>
                        <call>
                            <name>getline</name>
                            <argument_list>(
                                <argument>
                                    <expr>
                                        <name>cin</name>
                                    </expr>
                                </argument>
                                ,
                                <argument>
                                    <expr>
                                        <name>curr</name>
                                    </expr>
                                </argument>
                                )
                            </argument_list>
                        </call>
                    </expr>
                    ;
                </expr_stmt>
                <return>return
                    <expr>
                        <name>curr</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>inline</specifier>
            <name>void</name>
        </type>
        <name>func7</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>string</name>
                        <specifier>const</specifier>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>in</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>VS</name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>out</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>char</name>
                    </type>
                    <name>delim</name>
                    <init>=
                        <expr>
                            <literal type="char">' '</literal>
                        </expr>
                    </init>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{<block_content>
        </block_content>}
        </block>
    </function>

    <function>
        <type>
            <name>int</name>
        </type>
        <name>func8</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>deque</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>double</name>
                                </expr>
                            </argument>&gt;
                            </argument_list>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>N</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>deque</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>double</name>
                                </expr>
                            </argument>&gt;
                            </argument_list>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>K</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>score</name>
                        <init>=
                            <expr>
                                <literal type="number">0</literal>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <name>score</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>int</name>
        </type>
        <name>func9</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>deque</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>double</name>
                                </expr>
                            </argument>&gt;
                            </argument_list>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>N</name>
                </decl>
            </parameter>
            ,
            <parameter>
                <decl>
                    <type>
                        <name>
                            <name>deque</name>
                            <argument_list type="generic">&lt;<argument>
                                <expr>
                                    <name>double</name>
                                </expr>
                            </argument>&gt;
                            </argument_list>
                        </name>
                        <modifier>&amp;</modifier>
                    </type>
                    <name>K</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>int</name>
                        </type>
                        <name>score</name>
                        <init>=
                            <expr>
                                <literal type="number">0</literal>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <name>score</name>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <specifier>inline</specifier>
            <name>void</name>
        </type>
        <name>func10</name>
        <parameter_list>(
            <parameter>
                <decl>
                    <type>
                        <name>uns</name>
                    </type>
                    <name>testNum</name>
                </decl>
            </parameter>
            )
        </parameter_list>
        <block>{
            <block_content>
                <expr_stmt>
                    <expr>
                        <name>cout</name>
                        <operator>&lt;&lt;</operator>
                        <name>endl</name>
                    </expr>
                    ;
                </expr_stmt>
            </block_content>
            }
        </block>
    </function>

    <function>
        <type>
            <name>int</name>
        </type>
        <name>main</name>
        <parameter_list>()</parameter_list>
        <block>{
            <block_content>
                <decl_stmt>
                    <decl>
                        <type>
                            <name>uns</name>
                        </type>
                        <name>T</name>
                        <init>=
                            <expr>
                                <call>
                                    <name>func1</name>
                                    <argument_list>()</argument_list>
                                </call>
                            </expr>
                        </init>
                    </decl>
                    ;
                </decl_stmt>
                <return>return
                    <expr>
                        <literal type="number">0</literal>
                    </expr>
                    ;
                </return>
            </block_content>
            }
        </block>
    </function>
</unit>
